// <auto-generated />
using System;
using GestPharmaEF.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestPharmaEF.DAL.Migrations
{
    [DbContext(typeof(BDPMContext))]
    [Migration("20220620183744_V1")]
    partial class V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.ArmoireEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("TRIAL");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("nom")
                        .HasComment("TRIAL");

                    b.Property<long>("Patientid")
                        .HasColumnType("bigint")
                        .HasColumnName("patientid");

                    b.HasKey("Id")
                        .HasName("PK_ArmoireEntity");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Patientid");

                    b.ToTable("armoires", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.ArmoiresStockEntity", b =>
                {
                    b.Property<long>("Mediid")
                        .HasColumnType("bigint")
                        .HasColumnName("mediid")
                        .HasComment("TRIAL");

                    b.Property<long?>("Armoireid")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("armoireid")
                        .HasComment("TRIAL");

                    b.Property<string>("Medicamentid")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("medicamentid")
                        .HasComment("TRIAL");

                    b.Property<long?>("Ordonnanceid")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("ordonnanceid")
                        .HasComment("TRIAL");

                    b.Property<long?>("Quantite")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("quantite")
                        .HasComment("TRIAL");

                    b.HasKey("Mediid")
                        .HasName("PK_ArmoiresStockEntity");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Mediid"));

                    b.HasIndex("Armoireid");

                    b.HasIndex("Ordonnanceid");

                    b.ToTable("armoires-stock", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.MedecinEntity", b =>
                {
                    b.Property<long>("IdMedecin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_medecin")
                        .HasComment("TRIAL");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdMedecin"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email")
                        .HasComment("TRIAL");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("fax")
                        .HasComment("TRIAL");

                    b.Property<string>("Gsm")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("gsm")
                        .HasComment("TRIAL");

                    b.Property<string>("Inami")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("inami")
                        .HasComment("TRIAL");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("nom")
                        .HasComment("TRIAL");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("rue")
                        .HasComment("TRIAL");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("telephone")
                        .HasComment("TRIAL");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ville")
                        .HasComment("TRIAL");

                    b.HasKey("IdMedecin")
                        .HasName("PK_MedecinEntity");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdMedecin"));

                    b.ToTable("medecins", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.MedicamentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("TRIAL");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("nom")
                        .HasComment("TRIAL");

                    b.HasKey("Id")
                        .HasName("PK_MedicamentEntity");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("medicaments", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.OrdonnanceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Codebarre")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("codebarre")
                        .HasComment("TRIAL");

                    b.Property<DateTime>("Datecree")
                        .HasColumnType("date")
                        .HasColumnName("datecree")
                        .HasComment("TRIAL");

                    b.Property<DateTime>("Dateexpire")
                        .HasColumnType("date")
                        .HasColumnName("dateexpire")
                        .HasComment("TRIAL");

                    b.Property<long>("Medecinid")
                        .HasColumnType("bigint")
                        .HasColumnName("medecinid")
                        .HasComment("TRIAL");

                    b.Property<long>("Patientid")
                        .HasColumnType("bigint")
                        .HasColumnName("patientid");

                    b.Property<long>("Pharmacieid")
                        .HasColumnType("bigint")
                        .HasColumnName("pharmacieid")
                        .HasComment("TRIAL");

                    b.HasKey("Id")
                        .HasName("PK_OrdonnanceEntity");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Medecinid");

                    b.HasIndex("Patientid");

                    b.HasIndex("Pharmacieid");

                    b.ToTable("ordonnances", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.PersonneEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectAs")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("connectAs")
                        .HasComment("TRIAL");

                    b.Property<long?>("CurrentRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("currentroleid")
                        .HasComment("TRIAL");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email")
                        .HasComment("TRIAL");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnType("Bit")
                        .HasColumnName("IsActive")
                        .HasComment("TRIAL");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_PersonneEntity");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("CurrentRoleId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.MedicamentsPrescritEntity", b =>
                {
                    b.Property<long>("Medicamentid")
                        .HasColumnType("bigint")
                        .HasColumnName("medicamentid")
                        .HasComment("TRIAL");

                    b.Property<long>("Ordonnanceid")
                        .HasColumnType("bigint")
                        .HasColumnName("ordonnanceid")
                        .HasComment("TRIAL");

                    b.Property<long>("Prise")
                        .HasColumnType("bigint")
                        .HasColumnName("prise")
                        .HasComment("TRIAL");

                    b.Property<long>("Quantite")
                        .HasColumnType("bigint")
                        .HasColumnName("quantite")
                        .HasComment("TRIAL");

                    b.HasIndex("Medicamentid");

                    b.HasIndex("Ordonnanceid");

                    b.ToTable("medicaments-prescrits", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.PharmacyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("TRIAL");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Departement")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("departement")
                        .HasComment("TRIAL");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("nom")
                        .HasComment("TRIAL");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("region")
                        .HasComment("TRIAL");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("rue")
                        .HasComment("TRIAL");

                    b.Property<string>("Titulaires")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("titulaires")
                        .HasComment("TRIAL");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("url")
                        .HasComment("TRIAL");

                    b.Property<string>("Villes")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("villes")
                        .HasComment("TRIAL");

                    b.HasKey("Id")
                        .HasName("PK_PharmacyEntity");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("pharmacies", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.RoleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name")
                        .HasComment("TRIAL");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_RoleEntity");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.ArmoireEntity", b =>
                {
                    b.HasOne("GestPharmaEF.DAL.Entities.PersonneEntity", "Patient")
                        .WithMany("Armoires")
                        .HasForeignKey("Patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArmoiresEntity_PersonnesEntity");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.ArmoiresStockEntity", b =>
                {
                    b.HasOne("GestPharmaEF.DAL.Entities.ArmoireEntity", "Armoire")
                        .WithMany("ArmoiresStocks")
                        .HasForeignKey("Armoireid")
                        .IsRequired()
                        .HasConstraintName("FK_ArmoiresStockEntity_ArmoiresEntity");

                    b.HasOne("GestPharmaEF.DAL.Entities.MedicamentEntity", "Medi")
                        .WithOne("ArmoiresStock")
                        .HasForeignKey("GestPharmaEF.DAL.Entities.ArmoiresStockEntity", "Mediid")
                        .IsRequired()
                        .HasConstraintName("FK_MedicamentEntity_ArmoiresStockEntity");

                    b.HasOne("GestPharmaEF.DAL.Entities.OrdonnanceEntity", "Ordonnance")
                        .WithMany("ArmoiresStocks")
                        .HasForeignKey("Ordonnanceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArmoiresStockEntity_OrdonnanceEntity");

                    b.Navigation("Armoire");

                    b.Navigation("Medi");

                    b.Navigation("Ordonnance");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.OrdonnanceEntity", b =>
                {
                    b.HasOne("GestPharmaEF.DAL.Entities.MedecinEntity", "Medecin")
                        .WithMany("Ordonnances")
                        .HasForeignKey("Medecinid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrdonnanceEntity_MedecinEntity");

                    b.HasOne("GestPharmaEF.DAL.Entities.PersonneEntity", "Patient")
                        .WithMany("Ordonnances")
                        .HasForeignKey("Patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrdonnanceEntity_PersonnesEntity");

                    b.HasOne("GestPharmaEF.DAL.PharmacyEntity", "Pharmacie")
                        .WithMany("Ordonnances")
                        .HasForeignKey("Pharmacieid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrdonnanceEntity_PharmacyEntity");

                    b.Navigation("Medecin");

                    b.Navigation("Patient");

                    b.Navigation("Pharmacie");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.PersonneEntity", b =>
                {
                    b.HasOne("GestPharmaEF.DAL.RoleEntity", "Roles")
                        .WithMany("Personnes")
                        .HasForeignKey("CurrentRoleId")
                        .HasConstraintName("FK_Personne_Role_RoleId");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.MedicamentsPrescritEntity", b =>
                {
                    b.HasOne("GestPharmaEF.DAL.Entities.MedicamentEntity", "Medicament")
                        .WithMany()
                        .HasForeignKey("Medicamentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MedicamentsPrescritEntity_MedicamentEntity");

                    b.HasOne("GestPharmaEF.DAL.Entities.OrdonnanceEntity", "Ordonnance")
                        .WithMany()
                        .HasForeignKey("Ordonnanceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MedicamentsPrescritEntity_OrdonnanceEntity");

                    b.Navigation("Medicament");

                    b.Navigation("Ordonnance");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("GestPharmaEF.DAL.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("GestPharmaEF.DAL.Entities.PersonneEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("GestPharmaEF.DAL.Entities.PersonneEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("GestPharmaEF.DAL.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestPharmaEF.DAL.Entities.PersonneEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("GestPharmaEF.DAL.Entities.PersonneEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.ArmoireEntity", b =>
                {
                    b.Navigation("ArmoiresStocks");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.MedecinEntity", b =>
                {
                    b.Navigation("Ordonnances");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.MedicamentEntity", b =>
                {
                    b.Navigation("ArmoiresStock");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.OrdonnanceEntity", b =>
                {
                    b.Navigation("ArmoiresStocks");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.Entities.PersonneEntity", b =>
                {
                    b.Navigation("Armoires");

                    b.Navigation("Ordonnances");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.PharmacyEntity", b =>
                {
                    b.Navigation("Ordonnances");
                });

            modelBuilder.Entity("GestPharmaEF.DAL.RoleEntity", b =>
                {
                    b.Navigation("Personnes");
                });
#pragma warning restore 612, 618
        }
    }
}
